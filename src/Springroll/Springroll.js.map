{"version":3,"file":"Springroll.js","sources":["../src/debug/Debugger.js","../src/scale-manager/ScaleManager.js","../src/accessibility/SpeechSynth/SpeechSynth.js","../src/accessibility/ColorFilter/ColorFilter.js"],"sourcesContent":["/**\n * @typedef {object} DebuggerParams\n * @property {boolean} emitEnabled\n * @property {boolean} enabled\n * @property {number} minLevel\n *\n * @param {Object} params - options\n * @param {boolean} [params.emitEnabled=false] If this should emit events to the window\n * @param {'GENERAL' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR'} [params.minLevel='GENERAL'] The starting log level for the logger\n */\nexport class Debugger {\n  /**\n   * returns the params of the debugger\n   * @returns {DebuggerParams}\n   * @readonly\n   * @static\n   * @memberof Debugger\n   */\n  static get params() {\n    Debugger.initParams();\n    return window[Debugger.paramKey];\n  }\n\n  /**\n   * Sets the logging level of the debugger\n   * @param {string | number} level the name of the level\n   * @return {void}\n   */\n  static minLevel(level) {\n    Debugger.initParams();\n    if ('number' === typeof level) {\n      window[Debugger.paramKey].minLevel = level;\n      return;\n    }\n\n    level = level.toUpperCase();\n    if (Debugger.isValidLevelName(level)) {\n      window[Debugger.paramKey].minLevel = Debugger.LEVEL[level];\n    } else {\n      window[Debugger.paramKey].minLevel = Debugger.LEVEL['GENERAL'];\n    }\n  }\n\n  /**\n   * Setup the params if not set\n   * @private\n   * @static\n   * @memberof Debugger\n   */\n  static initParams() {\n    if (!window[Debugger.paramKey]) {\n      window[Debugger.paramKey] = {\n        emitEnabled: false,\n        enabled: true,\n        minLevel: 1\n      };\n    }\n  }\n\n  /**\n   * If emitting is enabled for this instance than it will dispatch a event on the window\n   * @param {string} [eventName='Debugger'] Name of the event\n   */\n  static emit(eventName = 'Debugger') {\n    Debugger.initParams();\n    if (Debugger.params.emitEnabled) {\n      window.dispatchEvent(new Event(eventName));\n    }\n  }\n\n  /**\n   * Returns logging levels\n   * @readonly\n   * @returns {object}\n   * @static\n   * @memberof Debugger\n   */\n  static get LEVEL() {\n    return {\n      GENERAL: 1,\n      DEBUG: 2,\n      INFO: 3,\n      WARN: 4,\n      ERROR: 5\n    };\n  }\n\n  /**\n   * Function to test if level meets requirements\n   * @param {string} [level='GENERAL']\n   * @returns {boolean}\n   * @private\n   */\n  static meetsLevelRequirement(level = 'GENERAL') {\n    Debugger.initParams();\n    if (Debugger.isValidLevelName(level)) {\n      if (Debugger.LEVEL[level] >= Debugger.params.minLevel) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Console logs all supplied arguments if the log level is low enough for them to be logged\n   * @param {'log' | 'general' | 'warn'| 'error' | 'debug' | 'info'} [type='log'] minimum level for this log to run at\n   * @param {*[]} args arguments you wish to log\n   */\n  static log(type = 'log', ...args) {\n    Debugger.initParams();\n    if (Debugger.isEnabled()) {\n      switch (type.toLowerCase()) {\n      case 'info':\n        if (Debugger.meetsLevelRequirement('INFO')) {\n          console.info(...args);\n          Debugger.emit();\n          return true;\n        }\n        return false;\n      case 'debug':\n        if (Debugger.meetsLevelRequirement('DEBUG')) {\n          console.debug(...args);\n          Debugger.emit();\n          return true;\n        }\n        return false;\n      case 'error':\n        if (Debugger.meetsLevelRequirement('ERROR')) {\n          console.error(...args);\n          Debugger.emit();\n          return true;\n        }\n        return false;\n      case 'warn':\n        if (Debugger.meetsLevelRequirement('WARN')) {\n          console.warn(...args);\n          Debugger.emit();\n          return true;\n        }\n        return false;\n      case 'log':\n      case 'general':\n      default:\n        if (Debugger.meetsLevelRequirement('GENERAL')) {\n          console.log(...args);\n          Debugger.emit();\n          return true;\n        }\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if the string argument is a valid level name\n   * @param {string} level the level name\n   * @return {boolean}\n   * @private\n   */\n  static isValidLevelName(level) {\n    Debugger.initParams();\n    if (\n      'GENERAL' == level ||\n      'DEBUG' == level ||\n      'INFO' == level ||\n      'WARN' == level ||\n      'ERROR' == level\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Will throw if statement is false\n   * @static\n   * @param {boolean} isTrue the expression to evaluate\n   * @returns\n   */\n  static assert(isTrue) {\n    Debugger.initParams();\n    if (!isTrue) {\n      throw `Assert Error: ${isTrue}`;\n    }\n  }\n\n  /**\n   * returns a boolean indicating if the debugger has been enabled or not\n   * @static\n   * @returns {boolean}\n   */\n  static isEnabled() {\n    return window[Debugger.paramKey].enabled;\n  }\n\n  /**\n   * Disabled or enables all debugger instances\n   * @static\n   * @param {boolean} flag\n   * @returns {void}\n   */\n  static enable(flag) {\n    Debugger.initParams();\n    window[Debugger.paramKey].enabled = flag;\n  }\n\n  /**\n   * returns the global params key\n   * @readonly\n   * @static\n   * @memberof Debugger\n   */\n  static get paramKey() {\n    return '__spring_roll_debugger_params__';\n  }\n}\n","/**\n * Simplifies listening to resize events by passing the relevant data to a provided callback\n * @param {Function} [callback=undefined]\n * @property {Function} [callback=undefined]\n */\nexport class ScaleManager {\n  /**\n   *Creates an instance of ScaleManager.\n   */\n  constructor(callback = undefined) {\n    this.width = 1;\n    this.height = 1;\n    this.callback = undefined;\n\n    if (callback instanceof Function) {\n      this.enable(callback);\n    }\n\n    this.onResize = this.onResize.bind(this);\n  }\n\n  /**\n   * onResize maps and passes the relevant to the user provided callback function\n   * @param {UIEvent} event\n   * @private\n   */\n  onResize(event) {\n    const width = event.target.innerWidth;\n    const height = event.target.innerHeight;\n\n    this.callback({\n      width,\n      height,\n      ratio: width / height\n    });\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Enables the scale manager listener. Will not be enabled if a callback is not supplied\n   * @param {Function} callback the function to be called on resize events\n   */\n  enable(callback = undefined) {\n    if (callback instanceof Function) {\n      this.callback = callback;\n      window.addEventListener('resize', this.onResize);\n    } else {\n      console.warn('Scale Manager was not passed a function');\n    }\n  }\n\n  /**\n   * Disabled the scale manager\n   */\n  disable() {\n    window.removeEventListener('resize', this.onResize);\n  }\n}\n","import { isArray } from 'util';\n\n/**\n * SpeechSync makes it easy to convert text to speech\n * @class SpeechSynth\n * @param {object} params\n * @param {number} [params.voice=0] Indicates what voice to use.\n * @param {number} [params.rate=1] The rate at which the text is said. Supports a range from 0.1 to 10.\n * @param {number} [params.pitch=0] Voice Pitch. Supports a pitch from 0 to 2\n * @param {number} [params.volume=1] Volume. Supports 0 to 1.\n */\nexport class SpeechSynth {\n  /**\n   *Creates an instance of SpeechSynth.\n   */\n  constructor({ voice = 0, rate = 1, pitch = 0, volume = 1 } = {}) {\n    this.speaker = new SpeechSynthesisUtterance();\n    this.voiceOptions = [];\n    this.voicesLoaded = false;\n    this.voice = {};\n\n    /**\n     * Called when voices are ready to be used\n     * @private\n     */\n    const loadVoices = function() {\n      this.voiceOptions = window.speechSynthesis.getVoices();\n      this.voice = this.voiceOptions[voice];\n      this.voicesLoaded = true;\n    }.bind(this);\n\n    const voiceOptions = window.speechSynthesis.getVoices();\n    if (isArray(voiceOptions) && 0 < voiceOptions.length) {\n      loadVoices();\n    } else {\n      window.speechSynthesis.addEventListener('voiceschanged', loadVoices, {\n        once: true\n      });\n    }\n\n    this.rate = rate;\n    this.pitch = pitch;\n    this.volume = volume;\n    this.queue = [];\n\n    this.speaker.onend = () => {\n      this.speaking = false;\n\n      if (0 < this.queue.length) {\n        this.say(this.queue.shift());\n      }\n    };\n  }\n\n  /**\n   * Pauses the announcer\n   */\n  pause() {\n    this.speaking = false;\n    window.speechSynthesis.pause();\n  }\n\n  /**\n   * Resumes the announcer\n   */\n  resume() {\n    this.speaking = true;\n    window.speechSynthesis.resume();\n  }\n\n  /**\n   * Pauses the announcer and clears the queue\n   */\n  cancel() {\n    this.speaking = false;\n    this.pause();\n    this.queue.length = 0;\n    window.speechSynthesis.cancel();\n  }\n\n  /**\n   * Causes the announcer to say whatever message is passed to it.\n   * If the announcer is already saying something then it will be added to a queue.\n   * @param {string} message\n   */\n  say(message) {\n    if (this.speaking || !this.voicesLoaded) {\n      this.queue.push(message);\n      return;\n    }\n\n    this.speaking = true;\n\n    this.speaker.text = message;\n    console.log('did speak');\n    window.speechSynthesis.speak(this.speaker);\n  }\n\n  /**\n   * Helper function to control the range of values.\n   * Will return the min value if not a number\n   * @private\n   * @param {number} min\n   * @param {number} max\n   * @param {number} value\n   * @returns {number}\n   */\n  rangeLimit(min, max, value) {\n    if (isNaN(value)) {\n      console.warn(`'${value}' is not a valid number!`);\n      return min;\n    }\n\n    if (value >= max) {\n      return max;\n    }\n\n    if (min >= value) {\n      return min;\n    }\n\n    return value;\n  }\n\n  /**\n   * Sets the voice by array index. Note the implementation of this is non-standard, and currently Chrome only has 1 voice.\n   * @param {number} index\n   */\n  set voice(index) {\n    this.speaker.voice = this.voiceOptions[index];\n  }\n\n  /**\n   * Returns the voice object. Will return null on Chrome.\n   * @returns {object | null}\n   */\n  get voice() {\n    return this.speaker.voice;\n  }\n\n  /**\n   * Will set the language for the announcer. If not pull the language from the html tag or browser.\n   * @param {string} lang e.g 'en-US'\n   */\n  set lang(lang) {\n    this.speaker.lang = lang;\n  }\n\n  /**\n   * Will return the language string if manually set\n   * @returns {string}\n   */\n  get lang() {\n    return this.speaker.lang;\n  }\n\n  /**\n   * Rate at which text is spoken\n   * @param {number} rate\n   */\n  set rate(rate) {\n    this.speaker.rate = this.rangeLimit(0.1, 10, rate);\n  }\n\n  /**\n   * Returns rate which text is spoken\n   * @returns {number}\n   */\n  get rate() {\n    return this.speaker.rate;\n  }\n\n  /**\n   * Sets the pitch at which text is spoken\n   * @param {number} pitch\n   */\n  set pitch(pitch) {\n    this.speaker.pitch = this.rangeLimit(0, 2, pitch);\n  }\n\n  /**\n   * Returns the pitch at which text is spoken\n   * @returns {number}\n   */\n  get pitch() {\n    return this.speaker.pitch;\n  }\n\n  /**\n   * Sets the current volume of the announcer\n   * @param {number} volume\n   */\n  set volume(volume) {\n    this.speaker.volume = this.rangeLimit(0, 1, volume);\n  }\n\n  /**\n   * Returns the current volume of the announcer\n   * @returns {number}\n   */\n  get volume() {\n    return this.speaker.volume;\n  }\n}\n","/**\n * Color filter allows you to simulate colorblindness\n * @export\n * @class ColorFilter\n */\nexport class ColorFilter {\n  /**\n   *Creates an instance of ColorFilter.\n   * @memberof ColorFilter\n   */\n  constructor() {\n    this.element = null;\n    if (null === document.getElementById('color__filter__svg')) {\n      document.head.innerHTML += `<svg\n      id=\"color__filter__svg\" xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\">\n      <defs>\n        <filter id=\"color__filter__protanopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.567, 0.433, 0,     0, 0\n                    0.558, 0.442, 0,     0, 0\n                    0,     0.242, 0.758, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__protanomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.817, 0.183, 0,     0, 0\n                    0.333, 0.667, 0,     0, 0\n                    0,     0.125, 0.875, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__deuteranopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.625, 0.375, 0,   0, 0\n                    0.7,   0.3,   0,   0, 0\n                    0,     0.3,   0.7, 0, 0\n                    0,     0,     0,   1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__deuteranomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.8,   0.2,   0,     0, 0\n                    0.258, 0.742, 0,     0, 0\n                    0,     0.142, 0.858, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__tritanopia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.95, 0.05,  0,     0, 0\n                    0,    0.433, 0.567, 0, 0\n                    0,    0.475, 0.525, 0, 0\n                    0,    0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__tritanomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.967, 0.033, 0,     0, 0\n                    0,     0.733, 0.267, 0, 0\n                    0,     0.183, 0.817, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__achromatopsia\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.299, 0.587, 0.114, 0, 0\n                    0.299, 0.587, 0.114, 0, 0\n                    0.299, 0.587, 0.114, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n        <filter id=\"color__filter__achromatomaly\">\n          <feColorMatrix\n            in=\"SourceGraphic\"\n            type=\"matrix\"\n            values=\"0.618, 0.320, 0.062, 0, 0\n                    0.163, 0.775, 0.062, 0, 0\n                    0.163, 0.320, 0.516, 0, 0\n                    0,     0,     0,     1, 0\"/>\n        </filter>\n      </defs>\n      </svg>\n      `;\n    }\n  }\n\n  /**\n   * Applies the specified filter to the element\n   * @param {HTMLElement} element\n   * @param {string} type\n   * @memberof ColorFilter\n   */\n  applyFilter(element, type) {\n    this.element = element;\n    this.changeFilter(type);\n  }\n\n  /**\n   * Changes the currently applied filter to the element if the color filter has that filter\n   * @param {string} type\n   * @returns\n   * @memberof ColorFilter\n   */\n  changeFilter(type) {\n    if (null !== this.element) {\n      this.element.style.filter = `url(#color__filter__${type})`;\n    }\n  }\n\n  /**\n   * Removes the filter from the element\n   * @memberof ColorFilter\n   */\n  removeFilter() {\n    this.element.style.filter = null;\n  }\n\n  /**\n   * Supported filter types\n   * @readonly\n   * @memberof ColorFilter\n   */\n  get types() {\n    return [\n      {\n        name: 'Protanopia',\n        value: 'protanopia'\n      },\n      {\n        name: 'Protanomaly',\n        value: 'protanomaly'\n      },\n      {\n        name: 'Deuteranopia',\n        value: 'deuteranopia'\n      },\n      {\n        name: 'Deuteranomaly',\n        value: 'deuteranomaly'\n      },\n      {\n        name: 'Tritanopia',\n        value: 'tritanopia'\n      },\n      {\n        name: 'Tritanomaly',\n        value: 'tritanomaly'\n      },\n      {\n        name: 'Achromatopsia',\n        value: 'achromatopsia'\n      },\n      {\n        name: 'Achromatomaly',\n        value: 'achromatomaly'\n      }\n    ];\n  }\n}\n"],"names":["Debugger","level","initParams","toUpperCase","isValidLevelName","paramKey","minLevel","LEVEL","window","eventName","params","emitEnabled","dispatchEvent","Event","type","isEnabled","args","toLowerCase","meetsLevelRequirement","info","emit","debug","error","warn","log","isTrue","enabled","flag","ScaleManager","callback","undefined","width","height","Function","enable","onResize","this","bind","event","target","innerWidth","innerHeight","addEventListener","removeEventListener","SpeechSynth","voice","rate","pitch","volume","speaker","SpeechSynthesisUtterance","voiceOptions","voicesLoaded","loadVoices","speechSynthesis","getVoices","isArray","length","queue","onend","speaking","_this","say","shift","pause","resume","cancel","message","text","speak","push","min","max","value","isNaN","index","lang","rangeLimit","ColorFilter","element","document","getElementById","head","innerHTML","changeFilter","style","filter"],"mappings":"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"}